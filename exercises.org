* SICP [19/356] [5%]
:PROPERTIES:
:COOKIE_DATA: recursive
:END:
** Chapter 1 [19/46] [41%]
*** DONE Exercise 1.1
CLOSED: [2017-12-17 Sun 22:11]
The expected outputs are:

#+BEGIN_EXAMPLE
10
12
8
3
6
19
#f
4
16
6
16
#+END_EXAMPLE

I performed these calculations mentally, and they matched the results I got from the interpreter.
*** DONE Exercise 1.2
CLOSED: [2017-12-17 Sun 22:16]
#+BEGIN_SRC scheme
(/
 (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5)))))
 (* 3 ( - 6 2) (- 2 7))
 )
#+END_SRC

The result was ~-37/150~ which matched the solutions I found online.
*** DONE Exercise 1.3
CLOSED: [2017-12-17 Sun 22:29]
#+BEGIN_SRC scheme
(define (square n) (* n n))
(define (sum-of-squares a b) (+ (square a) (square b)))

(define (f a b c)
  (cond
    ((and (> b a) (> c a)) (sum-of-squares b c))
    ((and (> a b) (> c b)) (sum-of-squares a c))
    ((and (> a c) (> b c)) (sum-of-squares a b))
    )
  )
#+END_SRC
*** DONE Exercise 1.4
CLOSED: [2017-12-17 Sun 22:35]
This question asked me to describe the behavior of:

#+BEGIN_SRC scheme
(define (a-plus-abs-b a b)
  ((if (> b 0) + -) a b))
#+END_SRC

The behavior is well described by the name of the function. It calculates ~a~ plus the absolute value of ~b~. This works because if ~b~ is negative (as tested by the if expression in the code) then it will perform an ~a~ minus ~b~ operation, and since ~b~ is already negative the double negative will result in addition.
*** DONE Exercise 1.5
CLOSED: [2017-12-18 Mon 22:08]
If the language is using applicative-order evaluation, the code will enter an infinite loop, because both arguments will be evaluated right away, and the ~p~ function enters and infinite loop. With normal-order evaluation, the code will return ~0~ and will not enter an infinite loop because the value of ~p~ is never needed.
*** DONE Exercise 1.6
CLOSED: [2017-12-19 Tue 22:18]
The program will enter an infinite loop because ~new-if~ does not have the short-circuiting behavior that the regular ~if~ expression does. Every time the ~new-if~ experssion is evaluated, the recursive call to ~sqrt-iter~ will be called and the loop will never end.
*** DONE Exercise 1.7
CLOSED: [2017-12-19 Tue 22:43]
#+BEGIN_SRC scheme
(define (square n) (* n n))

(define (sqrt-iter guess x old-guess)
  (if (good-enough? guess x old-guess)
      guess
      (sqrt-iter (improve guess x) x guess)))

(define (improve guess x)
  (average guess (/ x guess)))

(define (average x y)
  (/ (+ x y) 2))

(define (good-enough? guess x old-guess)
  (< (abs (- guess old-guess)) (* guess 0.001))
  )

(define (sqrt x)
  (sqrt-iter 1.0 x 0.0))

(/ (square (sqrt 1)) 1)
(/ (square (sqrt 2)) 2)
(/ (square (sqrt 10)) 10)
(/ (square (sqrt 0.000001)) 0.000001)
(/ (square (sqrt 10000000000000000000000000000000)) 10000000000000000000000000000000)
#+END_SRC
The above code is modified as requested in the exercise. Before the modification, the code would return a result that was approximately 1000 time too large for the small number case, and would freeze completely on the large number case (there probably wasn't enough precision available to get within the hard coded ~0.001~ tolerance for the large number case).

After the modification all the tests return a reasonably accurate result quickly, even for the small and large number cases.
*** DONE Exercise 1.8
CLOSED: [2017-12-21 Thu 11:00]
#+BEGIN_SRC scheme
(define (square n) (* n n))
(define (cube n) (* n n n))

(define (cube-root-iter guess x old-guess)
  (if (good-enough? guess x old-guess)
      guess
      (cube-root-iter (improve guess x) x guess)))

(define (improve guess x)
  (/
   (+ (/ x (square guess)) (* 2 guess))
   3)
  )

(define (good-enough? guess x old-guess)
  (< (abs (- guess old-guess)) (* guess 0.001))
  )

(define (cube-root x)
  (cube-root-iter 1.0 x 0.0))

(/ (cube (cube-root 1)) 1)
(/ (cube (cube-root 2)) 2)
(/ (cube (cube-root 10)) 10)
(/ (cube (cube-root 0.000001)) 0.000001)
(/ (cube (cube-root 10000000000000000000000000000000)) 10000000000000000000000000000000)
#+END_SRC
I modified the code from exercise 1.7 to calculate the cube root instead of the square root.
*** DONE Exercise 1.9
CLOSED: [2017-12-21 Thu 12:02]
#+BEGIN_SRC scheme
(define (+ a b)
  (if (= a 0) b (inc (+ (dec a) b))))
(define (+ a b)
  (if (= a 0) b (+ (dec a) (inc b))))
#+END_SRC
This question asks about these two procedures: Are the processes described by these procedures iterative or recursive?

The first procedure describes a recursive process. It will build up many ~inc~ operations on the stack.

The second procedure describes a iterative process. The ~dec~ and ~inc~ operations are performed right away, and then the procedure calls itself recursively. There is are no steps left to be performed so the stack is not needed. Also, the variables ~a~ and ~b~ give a complete description of where we are in the iterative process.

Using the substitution model, the two procedures work as follows:
#+BEGIN_EXAMPLE
(+ 4 5)
(inc (+ (dec 4) 5))
(inc (+ 3 5))
(inc (inc (+ (dec 3) 5)))
(inc (inc (+ 2 5)))
(inc (inc (inc (+ (dec 2) 5))))
(inc (inc (inc (+ 1 5))))
(inc (inc (inc (inc (+ (dec 1) 5)))))
(inc (inc (inc (inc (+ 0 5)))))
(inc (inc (inc (inc 5))))
(inc (inc (inc 6)))
(inc (inc 7))
(inc 8)
9

(+ 4 5)
(+ (dec 4) (inc 5))
(+ 3 6)
(+ (dec 3) (inc 6))
(+ 2 7)
(+ (dec 2) (inc 7))
(+ 1 8)
(+ (dec 1) (inc 8))
(+ 0 9)
9
#+END_EXAMPLE
*** TODO Exercise 1.10
*** DONE Exercise 1.11
CLOSED: [2017-12-21 Thu 13:32]
#+BEGIN_SRC scheme
(define (fr n)
  (cond
    ((< n 3) n)
    (else (+ (fr (- n 1)) (* 2 (fr (- n 2))) (* 3 (fr (- n 3)))))
    ))

(fr 0)
(fr 1)
(fr 2)
(fr 3)
(fr 4)
(fr 5)
(fr 6)
(fr 7)

(define (fi n)
  (define (fi-iter a b c n)
    (cond
      ((= n 0) a)
      (else (fi-iter (+ a (* 2 b) (* 3 c)) a b (dec n)))
      ))
  (cond
    ((< n 3) n)
    (else (fi-iter 2 1 0 (- n 2)))
    ))

(fi 0)
(fi 1)
(fi 2)
(fi 3)
(fi 4)
(fi 5)
(fi 6)
(fi 7)
#+END_SRC
*** DONE Exercise 1.12
CLOSED: [2017-12-21 Thu 14:05]
#+BEGIN_SRC scheme
(define (pas n m)
  (cond
    ((<= n 0) 0)
    ((<= m 0) 0)
    ((= m 1) 1)
    ((= n m) 1)
    (else (+ (pas (dec n) (dec m)) (pas (dec n) m)))
    ))
#+END_SRC
*** TODO Exercise 1.13
*** DONE Exercise 1.14
CLOSED: [2017-12-21 Thu 17:50]
#+BEGIN_SRC scheme
(define (coin n)
  (cond
    ((= n 1) 1)
    ((= n 2) 5)
    ((= n 3) 10)
    ((= n 4) 25)
    ((= n 5) 50)
    ))

(define (change n)
  (define (change-iter n c)
    (cond
      ((< n 0) 0)
      ((= n 0) 1)
      ((> c 5) 0)
      (else (+ (change-iter n (inc c)) (change-iter (- n (coin c)) c)))
      )
    )
  (change-iter n 1)
  )
#+END_SRC
I implemented the change function as above.

To explore the process of making change for 11 cents:
#+BEGIN_EXAMPLE scheme
                   (c 11 1)
(+        (c 11 2)             (c 10 1))
(+ (+ (c 11 3) (c 6 2)) (+ (c 10 2) (c 9 1)))
#+END_EXAMPLE
Above is the beginning of a sketch of the recursive process.

The space complexity is ~O(n)~ like most tree recursive processes, only the nodes of the current path need to be kept in memory.

The time complexity is ~O(n^5)~ because there are 5 kinds of coins. Consider:

If we only had 1 kind of coin, it would be straight counting (by the value of that one coin) up to the number of cents we need to make change for. This would be an ~O(n)~ process.
If we had 2 kinds of coins, we would do straight counting by the first coin (~O(n)~), but *for each step* in the counting we would have to count out the remainder from the first coin using the second coin (this counting of the remainder would be ~O(n)~). Combine the two different counts and we get ~O(n^2)~.
Continuing with this logic we eventually get ~O(n^5)~ for the complexity when using all 5 coins.
*** DONE Exercise 1.15
CLOSED: [2017-12-21 Thu 22:25]
#+BEGIN_EXAMPLE
(sine 12.15)
(p (sine 4.05))
(p (p (sine 1.35)))
(p (p (p (sine 0.45))))
(p (p (p (p (sine 0.15)))))
(p (p (p (p (p (sine 0.05))))))
(p (p (p (p (p 0.05)))))
...
#+END_EXAMPLE
~p~ will be called 5 times.

Notice that if we triple the angle we are calling ~sine~ with, it will only add one additional call to ~p~, because we are dividing at every step of the recursive process. This makes it so the order of growth for both time (steps) and space is ~O(log n)~.
*** DONE Exercise 1.16
CLOSED: [2017-12-22 Fri 14:03]
#+BEGIN_SRC scheme
(define (half n) (/ n 2))
(define (square n) (* n n))
(define (even? n) (= (remainder n 2) 0))

(define (exp b n)
  (define (exp-iter a b n)
    (cond
      ((= n 0) a)
      ((even? n) (exp-iter a (square b) (half n)))
      (else (exp-iter (* a b) b (dec n)))
      )
    )
  (exp-iter 1 b n)
  )
#+END_SRC
*** DONE Exercise 1.17
CLOSED: [2017-12-22 Fri 14:18]
#+BEGIN_SRC scheme
(define (half n) (/ n 2))
(define (double n) (* 2 n))
(define (even? n) (= (remainder n 2) 0))

(define (multiply a b)
  (cond
    ((= b 1) a)
    ((even? b) (double (multiply a (half b))))
    (else (+ a (multiply a (dec b))))
    )
  )
#+END_SRC
*** DONE Exercise 1.18
CLOSED: [2017-12-22 Fri 14:54]
#+BEGIN_SRC scheme
(define (half n) (/ n 2))
(define (double n) (* 2 n))
(define (even? n) (= (remainder n 2) 0))

(define (multiply a b)
  (define (multiply-iter a b c)
    (cond
      ((= b 0) c)
      ((even? b) (multiply-iter (double a) (half b) c))
      (else (multiply-iter a (dec b) (+ a c)))
      ))
  (multiply-iter a b 0)
  )
#+END_SRC

Exercise 1.16 says:

#+BEGIN_QUOTE
In general, the technique of defining an invariant quantity
that remains unchanged from state to state is a powerful
way to think about the design of iterative algorithms.
#+END_QUOTE

This exercise is a great example of that.

The invariants here are:

#+BEGIN_EXAMPLE
For the initial case:  ab = ab + c where c = 0
For the even case:     ab + c = 2a * (1/2)b + c
For the odd case:      ab + c = a * (b - 1) + (c + a)
For the terminal case: ab + c = c where b = 0
#+END_EXAMPLE

Notice that both the even and odd cases move us towards our terminal case.
*** TODO Exercise 1.19
*** DONE Exercise 1.20
CLOSED: [2017-12-23 Sat 21:31]
First I will try to evaluate ~(gcd 206 40)~ using the substitution model with normal-order evaluation:

#+BEGIN_EXAMPLE
(gcd 206 40)
(if (= 40 0) 206 (gcd 40 (remainder 206 40)))
(if (= 40 0) 206 (if (= (remainder 206 40) 0) 40 (gcd (remainder 206 40) (remainder 40 (remainder 206 40)))))
...
#+END_EXAMPLE

That is starting to get pretty incomprehensible.

Let's look at the definition of gcd:

#+BEGIN_SRC scheme
(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))
#+END_SRC

By looking at the definition, we can see that, under the substitution model with normal-order evaluation:
- ~a~ gets evaluated once in all cases
- ~b~ gets evaluated either 1 or 3 times, depending on the case
- ~remainder~ gets evaluated either 0 or 1 times, depending on the case

Let's look at a simpler case, using the substitution model with applicative-order evaluation:

#+BEGIN_SRC scheme
(gcd 206 40)
(gcd 40 6)
(gcd 6 4)
(gcd 4 2)
(gcd 2 0)
#+END_SRC

~remainder~ would be evaluated at the end of every call, except for the last call with applicative-order evaluation, so it would be called 4 times.

When ~gcd~ receives some arguments, each of those arguments may require calling ~remainder~ zero or more times (under normal-order evaluation). Let ~A~ and ~B~ be the number of times ~remainder~ must be evaluated to get the value of ~a~ and ~b~ repectively.

#+BEGIN_EXAMPLE
f(A,B) = B + A                if B would evaluat to 0
f(A,B) = B + f(B, 1 + A + B)  if B would not evaluate to 0

(gcd 2 0)     (f 0 0)
              (+ 0 0)
              0

(gcd 4 2)     (f 0 0)
(gcd 2 0)     (+ 0 (f 0 1))
              (+ 0 (+ 1 0))
              1

(gcd 6 4)     (f 0 0)
(gcd 4 2)     (+ 0 (f 0 1))
(gcd 2 0)     (+ 0 (+ 1 (f 1 2)))
              (+ 0 (+ 1 (+ 2 1)))
              4

(gcd 40 6)    (f 0 0)
(gcd 6 4)     (+ 0 (f 0 1))
(gcd 4 2)     (+ 0 (+ 1 (f 1 2)))
(gcd 2 0)     (+ 0 (+ 1 (+ 2 (f 2 4))))
              (+ 0 (+ 1 (+ 2 (+ 4 2))))
              9

(gcd 206 40)  (f 0 0)
(gcd 40 6)    (+ 0 (f 0 1))
(gcd 6 4)     (+ 0 (+ 1 (f 1 2)))
(gcd 4 2)     (+ 0 (+ 1 (+ 2 (f 2 4))))
(gcd 2 0)     (+ 0 (+ 1 (+ 2 (+ 4 (f 4 7)))))
              (+ 0 (+ 1 (+ 2 (+ 4 (+ 7 4)))))
              18
#+END_EXAMPLE

18 calls to ~remainder~ are made with normal-order evaluation. Above is some loose notation that demonstrates this.
*** DONE Exercise 1.21
CLOSED: [2017-12-24 Sun 19:23]
#+BEGIN_EXAMPLE
199
1999
7
#+END_EXAMPLE
*** DONE Exercise 1.22
CLOSED: [2017-12-24 Sun 19:55]
**** Code
#+BEGIN_SRC scheme
(define (square n) (* n n))
(define (prime? n)
  (= n (smallest-divisor n)))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))
(define (divides? a b) (= (remainder b a) 0))
(define (smallest-divisor n) (find-divisor n 2))

(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime) start-time))))
(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))

(define (even? n) (= (remainder n 2) 0))

(define (search-for-primes start n)
  (cond
    ((= n 0) (newline))
    ((even? start) (search-for-primes (inc start) n))
    ((prime? start)
     (timed-prime-test start)
     (search-for-primes (+ 2 start) (dec n)))
    (else (search-for-primes (+ 2 start) n))
    ))
#+END_SRC
**** Timings
#+BEGIN_EXAMPLE
1009 *** 3
1013 *** 3
1019 *** 3

10007 *** 8
10009 *** 9
10037 *** 9

100003 *** 16
100019 *** 16
100043 *** 16

1000003 *** 91
1000033 *** 93
1000037 *** 92
#+END_EXAMPLE
**** Thoughts
As stated in the exercise, each set of timings should be about =sqrt(10)= times longer than the prior set of timings. This appears to be the case, with the exception of the primes above 100,000 which were faster than expected. The timings vary from run to run by a factor of 2 or 3, but it looks like the expected order of growth is within an order of magnitude of the actual times.
*** TODO Exercise 1.23
*** TODO Exercise 1.24
*** TODO Exercise 1.25
*** TODO Exercise 1.26
*** TODO Exercise 1.27
*** TODO Exercise 1.28
*** TODO Exercise 1.29
*** TODO Exercise 1.30
*** TODO Exercise 1.31
*** TODO Exercise 1.32
*** TODO Exercise 1.33
*** TODO Exercise 1.34
*** TODO Exercise 1.35
*** TODO Exercise 1.36
*** TODO Exercise 1.37
*** TODO Exercise 1.38
*** TODO Exercise 1.39
*** TODO Exercise 1.40
*** TODO Exercise 1.41
*** TODO Exercise 1.42
*** TODO Exercise 1.43
*** TODO Exercise 1.44
*** TODO Exercise 1.45
*** TODO Exercise 1.46
** Chapter 2 [0/97] [0%]
*** TODO Exercise 2.1
*** TODO Exercise 2.2
*** TODO Exercise 2.3
*** TODO Exercise 2.4
*** TODO Exercise 2.5
*** TODO Exercise 2.6
*** TODO Exercise 2.7
*** TODO Exercise 2.8
*** TODO Exercise 2.9
*** TODO Exercise 2.10
*** TODO Exercise 2.11
*** TODO Exercise 2.12
*** TODO Exercise 2.13
*** TODO Exercise 2.14
*** TODO Exercise 2.15
*** TODO Exercise 2.16
*** TODO Exercise 2.17
*** TODO Exercise 2.18
*** TODO Exercise 2.19
*** TODO Exercise 2.20
*** TODO Exercise 2.21
*** TODO Exercise 2.22
*** TODO Exercise 2.23
*** TODO Exercise 2.24
*** TODO Exercise 2.25
*** TODO Exercise 2.26
*** TODO Exercise 2.27
*** TODO Exercise 2.28
*** TODO Exercise 2.29
*** TODO Exercise 2.30
*** TODO Exercise 2.31
*** TODO Exercise 2.32
*** TODO Exercise 2.33
*** TODO Exercise 2.34
*** TODO Exercise 2.35
*** TODO Exercise 2.36
*** TODO Exercise 2.37
*** TODO Exercise 2.38
*** TODO Exercise 2.39
*** TODO Exercise 2.40
*** TODO Exercise 2.41
*** TODO Exercise 2.42
*** TODO Exercise 2.43
*** TODO Exercise 2.44
*** TODO Exercise 2.45
*** TODO Exercise 2.46
*** TODO Exercise 2.47
*** TODO Exercise 2.48
*** TODO Exercise 2.49
*** TODO Exercise 2.50
*** TODO Exercise 2.51
*** TODO Exercise 2.52
*** TODO Exercise 2.53
*** TODO Exercise 2.54
*** TODO Exercise 2.55
*** TODO Exercise 2.56
*** TODO Exercise 2.57
*** TODO Exercise 2.58
*** TODO Exercise 2.59
*** TODO Exercise 2.60
*** TODO Exercise 2.61
*** TODO Exercise 2.62
*** TODO Exercise 2.63
*** TODO Exercise 2.64
*** TODO Exercise 2.65
*** TODO Exercise 2.66
*** TODO Exercise 2.67
*** TODO Exercise 2.68
*** TODO Exercise 2.69
*** TODO Exercise 2.70
*** TODO Exercise 2.71
*** TODO Exercise 2.72
*** TODO Exercise 2.73
*** TODO Exercise 2.74
*** TODO Exercise 2.75
*** TODO Exercise 2.76
*** TODO Exercise 2.77
*** TODO Exercise 2.78
*** TODO Exercise 2.79
*** TODO Exercise 2.80
*** TODO Exercise 2.81
*** TODO Exercise 2.82
*** TODO Exercise 2.83
*** TODO Exercise 2.84
*** TODO Exercise 2.85
*** TODO Exercise 2.86
*** TODO Exercise 2.87
*** TODO Exercise 2.88
*** TODO Exercise 2.89
*** TODO Exercise 2.90
*** TODO Exercise 2.91
*** TODO Exercise 2.92
*** TODO Exercise 2.93
*** TODO Exercise 2.94
*** TODO Exercise 2.95
*** TODO Exercise 2.96
*** TODO Exercise 2.97
** Chapter 3 [0/82] [0%]
*** TODO Exercise 3.1
*** TODO Exercise 3.2
*** TODO Exercise 3.3
*** TODO Exercise 3.4
*** TODO Exercise 3.5
*** TODO Exercise 3.6
*** TODO Exercise 3.7
*** TODO Exercise 3.8
*** TODO Exercise 3.9
*** TODO Exercise 3.10
*** TODO Exercise 3.11
*** TODO Exercise 3.12
*** TODO Exercise 3.13
*** TODO Exercise 3.14
*** TODO Exercise 3.15
*** TODO Exercise 3.16
*** TODO Exercise 3.17
*** TODO Exercise 3.18
*** TODO Exercise 3.19
*** TODO Exercise 3.20
*** TODO Exercise 3.21
*** TODO Exercise 3.22
*** TODO Exercise 3.23
*** TODO Exercise 3.24
*** TODO Exercise 3.25
*** TODO Exercise 3.26
*** TODO Exercise 3.27
*** TODO Exercise 3.28
*** TODO Exercise 3.29
*** TODO Exercise 3.30
*** TODO Exercise 3.31
*** TODO Exercise 3.32
*** TODO Exercise 3.33
*** TODO Exercise 3.34
*** TODO Exercise 3.35
*** TODO Exercise 3.36
*** TODO Exercise 3.37
*** TODO Exercise 3.38
*** TODO Exercise 3.39
*** TODO Exercise 3.40
*** TODO Exercise 3.41
*** TODO Exercise 3.42
*** TODO Exercise 3.43
*** TODO Exercise 3.44
*** TODO Exercise 3.45
*** TODO Exercise 3.46
*** TODO Exercise 3.47
*** TODO Exercise 3.48
*** TODO Exercise 3.49
*** TODO Exercise 3.50
*** TODO Exercise 3.51
*** TODO Exercise 3.52
*** TODO Exercise 3.53
*** TODO Exercise 3.54
*** TODO Exercise 3.55
*** TODO Exercise 3.56
*** TODO Exercise 3.57
*** TODO Exercise 3.58
*** TODO Exercise 3.59
*** TODO Exercise 3.60
*** TODO Exercise 3.61
*** TODO Exercise 3.62
*** TODO Exercise 3.63
*** TODO Exercise 3.64
*** TODO Exercise 3.65
*** TODO Exercise 3.66
*** TODO Exercise 3.67
*** TODO Exercise 3.68
*** TODO Exercise 3.69
*** TODO Exercise 3.70
*** TODO Exercise 3.71
*** TODO Exercise 3.72
*** TODO Exercise 3.73
*** TODO Exercise 3.74
*** TODO Exercise 3.75
*** TODO Exercise 3.76
*** TODO Exercise 3.77
*** TODO Exercise 3.78
*** TODO Exercise 3.79
*** TODO Exercise 3.80
*** TODO Exercise 3.81
*** TODO Exercise 3.82
** Chapter 4 [0/79] [0%]
*** TODO Exercise 4.1
*** TODO Exercise 4.2
*** TODO Exercise 4.3
*** TODO Exercise 4.4
*** TODO Exercise 4.5
*** TODO Exercise 4.6
*** TODO Exercise 4.7
*** TODO Exercise 4.8
*** TODO Exercise 4.9
*** TODO Exercise 4.10
*** TODO Exercise 4.11
*** TODO Exercise 4.12
*** TODO Exercise 4.13
*** TODO Exercise 4.14
*** TODO Exercise 4.15
*** TODO Exercise 4.16
*** TODO Exercise 4.17
*** TODO Exercise 4.18
*** TODO Exercise 4.19
*** TODO Exercise 4.20
*** TODO Exercise 4.21
*** TODO Exercise 4.22
*** TODO Exercise 4.23
*** TODO Exercise 4.24
*** TODO Exercise 4.25
*** TODO Exercise 4.26
*** TODO Exercise 4.27
*** TODO Exercise 4.28
*** TODO Exercise 4.29
*** TODO Exercise 4.30
*** TODO Exercise 4.31
*** TODO Exercise 4.32
*** TODO Exercise 4.33
*** TODO Exercise 4.34
*** TODO Exercise 4.35
*** TODO Exercise 4.36
*** TODO Exercise 4.37
*** TODO Exercise 4.38
*** TODO Exercise 4.39
*** TODO Exercise 4.40
*** TODO Exercise 4.41
*** TODO Exercise 4.42
*** TODO Exercise 4.43
*** TODO Exercise 4.44
*** TODO Exercise 4.45
*** TODO Exercise 4.46
*** TODO Exercise 4.47
*** TODO Exercise 4.48
*** TODO Exercise 4.49
*** TODO Exercise 4.50
*** TODO Exercise 4.51
*** TODO Exercise 4.52
*** TODO Exercise 4.53
*** TODO Exercise 4.54
*** TODO Exercise 4.55
*** TODO Exercise 4.56
*** TODO Exercise 4.57
*** TODO Exercise 4.58
*** TODO Exercise 4.59
*** TODO Exercise 4.60
*** TODO Exercise 4.61
*** TODO Exercise 4.62
*** TODO Exercise 4.63
*** TODO Exercise 4.64
*** TODO Exercise 4.65
*** TODO Exercise 4.66
*** TODO Exercise 4.67
*** TODO Exercise 4.68
*** TODO Exercise 4.69
*** TODO Exercise 4.70
*** TODO Exercise 4.71
*** TODO Exercise 4.72
*** TODO Exercise 4.73
*** TODO Exercise 4.74
*** TODO Exercise 4.75
*** TODO Exercise 4.76
*** TODO Exercise 4.77
*** TODO Exercise 4.78
*** TODO Exercise 4.79
** Chapter 5 [0/52] [0%]
*** TODO Exercise 5.1
*** TODO Exercise 5.2
*** TODO Exercise 5.3
*** TODO Exercise 5.4
*** TODO Exercise 5.5
*** TODO Exercise 5.6
*** TODO Exercise 5.7
*** TODO Exercise 5.8
*** TODO Exercise 5.9
*** TODO Exercise 5.10
*** TODO Exercise 5.11
*** TODO Exercise 5.12
*** TODO Exercise 5.13
*** TODO Exercise 5.14
*** TODO Exercise 5.15
*** TODO Exercise 5.16
*** TODO Exercise 5.17
*** TODO Exercise 5.18
*** TODO Exercise 5.19
*** TODO Exercise 5.20
*** TODO Exercise 5.21
*** TODO Exercise 5.22
*** TODO Exercise 5.23
*** TODO Exercise 5.24
*** TODO Exercise 5.25
*** TODO Exercise 5.26
*** TODO Exercise 5.27
*** TODO Exercise 5.28
*** TODO Exercise 5.29
*** TODO Exercise 5.30
*** TODO Exercise 5.31
*** TODO Exercise 5.32
*** TODO Exercise 5.33
*** TODO Exercise 5.34
*** TODO Exercise 5.35
*** TODO Exercise 5.36
*** TODO Exercise 5.37
*** TODO Exercise 5.38
*** TODO Exercise 5.39
*** TODO Exercise 5.40
*** TODO Exercise 5.41
*** TODO Exercise 5.42
*** TODO Exercise 5.43
*** TODO Exercise 5.44
*** TODO Exercise 5.45
*** TODO Exercise 5.46
*** TODO Exercise 5.47
*** TODO Exercise 5.48
*** TODO Exercise 5.49
*** TODO Exercise 5.50
*** TODO Exercise 5.51
*** TODO Exercise 5.52
